generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(cuid())
  clerkUserId String        @unique
  apiKey      String        @unique @default(cuid())
  name        String?
  email       String        @unique
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  trades      Trade[]
  performance Performance[]
  aiInsights  AIInsight[]
  Account     Account[]
  strategies  Strategy[]
}

model Trade {
  id            String        @id @default(cuid())
  tradeId       String        @unique
  instrument    String
  entryPrice    Float
  exitPrice     Float
  positionSize  Float
  profitLoss    Float
  entryTime     DateTime
  exitTime      DateTime
  duration      Int
  stopLoss      Float?
  takeProfit    Float?
  screenshotUrl String?
  strategy      Strategy?     @relation(fields: [strategyId], references: [id])
  strategyId    String?
  notes         String?
  positionType  PositionType?
  createdAt     DateTime      @default(now())
  sentiment     Sentiment     @default(Neutral)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiInsights    AIInsight[]
  Account       Account?      @relation(fields: [accountId], references: [id])
  accountId     String?
  symbol        String?
  side          String?
  status        String?
  volume        Float?
  date          DateTime?
  setup         String[]
  timeframe     String?
  riskReward    Float?
  commission    Float?
  hourOfDay     Int?
  profitFactor  Float?
  performance   Performance?  @relation(fields: [performanceId], references: [id])
  performanceId String?
}

model Position {
  id         Int      @id @default(autoincrement())
  positionId String // from cTrader
  price      Float
  timestamp  DateTime
  receivedAt DateTime @default(now())
  rawData    String? // store original data for debugging
}

model Performance {
  id                 String   @id @default(cuid())
  userId             String
  winRate            Float
  averageHoldingTime Int
  averageProfitLoss  Float
  maxDrawdown        Float
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades             Trade[]
  createdAt          DateTime @default(now())
  Account            Account? @relation(fields: [accountId], references: [id])
  accountId          String?
}

model AIInsight {
  insightId      String   @id @default(cuid())
  tradeReference String   @unique
  trade          Trade    @relation(fields: [tradeReference], references: [tradeId], onDelete: Cascade)
  insightText    String
  createdAt      DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Account        Account? @relation(fields: [accountId], references: [id])
  accountId      String?
}

enum Sentiment {
  Positive
  Neutral
  Negative
}

enum PositionType {
  Buy
  Sell
}

model Account {
  id          String        @id @default(cuid())
  name        String
  description String?
  accountType AccountType   @default(Live)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      Trade[]
  performance Performance[]
  aiInsights  AIInsight[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum AccountType {
  Demo
  Live
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  category    ProductCategory
  features    String[]
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum ProductCategory {
  TradingBot
  Plugin
  Indicator
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  items     Json
  total     Float
  email     String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([email])
}

model Strategy {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trades      Trade[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
